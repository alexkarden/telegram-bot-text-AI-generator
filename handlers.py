import math

from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message
from dotenv import load_dotenv

from keyboards import keyboard_after_answer
from script import text_generated


load_dotenv()
router = Router()
global users_dict
users_dict = {}


@router.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–Ø –º–æ–≥—É:\n"
        "-–ü–∏—Å–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞—Ç—ã/—Ä–∞—Å—Å–∫–∞–∑—ã/–ø–µ—Å–Ω–∏/—Å—Ç–∏—Ö–∏/—Å—Ç–∞—Ç—å–∏ –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã\n"
        "-–†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n"
        "-–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ\n"
        "-–ö–æ–¥–∏—Ç—å –∏ –æ–±—É—á–∞—Ç—å –∫–æ–¥–∏–Ω–≥—É\n"
        "-–û–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É \n"
        "-–®—É—Ç–∏—Ç—å\n\n"
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–µ–π.\n\n"
        "–ë–æ—Ç –ø–æ–º–Ω–∏—Ç –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∏—Ö. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç –Ω–∞ –Ω–æ–≤—É—é —Ç–µ–º—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå–ó–∞–≤–µ—Ä—à–∏—Ç—å'\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?"
    )
    await message.answer(f"{welcome_text}", parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã/—Ñ–æ—Ç–æ)
@router.message(F.content_type == types.ContentType.TEXT)
async def all_message(message: Message):
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º.....")
    text_message = str(message.text)
    message_dict = {"role": "system", "content": f"{text_message}"}
    if message.from_user.id in users_dict:
        user_list = users_dict[message.from_user.id]
        user_list.append(message_dict)
    else:
        user_message_list = [message_dict]
        users_dict[message.from_user.id] = user_message_list
    message_list = users_dict[message.from_user.id]
    ai_answer = await text_generated(message_list)
    if text_message and ai_answer:
        range_answer = math.ceil(len(ai_answer) / 4096)
        for number in range(range_answer):
            stringtg = ai_answer[number*4096:(number+1)*4096]
            await message.answer(f"{stringtg}", reply_markup=keyboard_after_answer, parse_mode=ParseMode.HTML)
    else:
        await message.answer("'Sad but True' - c–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query()
async def callback_query(callback: CallbackQuery):
    data = callback.data
    if data == "end":
        if callback.from_user.id in users_dict:
            del users_dict[callback.from_user.id]
        await callback.message.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω! - –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" ,parse_mode=ParseMode.HTML)
